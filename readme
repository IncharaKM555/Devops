
x = 5
y = 10
print(x + y)



FROM python
WORKDIR /app
COPY . /app
RUN python sample.py
CMD ["python", "sample.py"]



docker build -t "app" .
docker images
docker tag app:latest hudakausar/huda
docker images
docker login -u hudakausar 
enter password here
docker push hudakausar/huda
docker pull hudakausar/huda

maven----------------------------------------------------

Configuration in Eclipse:IDE
1)  Click on file, select new then select maven project
2) Set default workspace location click next
3) For catalog select internal, for filter select maven- archetype - quickstart then click next
4) Type group-id (vvce) and artifact id (ise) and click finish
5) In the console Press Y and enter
6) Under pom.xml create class (eg: dev.java)
7) Under pom.xml create folder (eg: JS0N)
8) Under JSON create file (eg: demo.json) 

Configuration using Maven Repository
1) In the browser type maven repostory. Search for JSON simple click on version 1.1.1 and copy code


9) Come back to Eclipse -IDE. Click on pom.xml after ‹/dependency> paste the code.
10) In demo.json type the following

{
	"firstname":"Huda",
	"lastname":"Kausar"
}


11) In dev.java type the follourng code and
run code

package vvce.ise;
import java. io. FileReader;
import java. io. IOException;
import java. text. ParseException;
import org. json. simple. JSONObject;
import org. json. simple.parser. JSONParser;

public class dev {
public static void main(String [] args) throws IOException, ParseException, org. json. simple.parser. ParseException{
JSONParser jsonparser=new JSONParser();
FileReader reader=new FileReader(".\\JSON\\demo.json");
Object obj=jsonparser.parse(reader);
JSONObject empjsonobj=(JSONObject)obj;
String fname=(String)empjsonobj.get("firstname");
String lname=(String)empjsonobj.get("lastname");
System.out.println("first name:"+fname);
System.out.println("last name:"+lname);
}
}


Output :
first name: Huda 
last name: Kausar

slack-----------------------------------------------------------


Configuration using Jenkins
1 Login to Jenkins
2) In Manage Jenkins, select plugins then select available plugins and install Slack Notification


Configuration using Slack
1) Download and install slack for windows
2) Login to slack
3) Select any workspace
4) Click on More, then Automations, then Apps and search for Jenkins CI.
5) click on Configuration, add to slack and select any channel.
6) Copy secret text



3) Come back to Jenkins, Manage Jenkins, System configuration, scroll to slack. For workspace enter workspace name, credential add → Jenkins → Kind → Secret text, Secret paste ID→ news9
 Add credential → new9 channel → # social Test connection Save
4) In Dashboard select any project configure → Post Build Action→ Select slack notification and enable all and save
Build Now
6) Output of actions displayed under #social channel in Slack.


Install Email Extension Plugin:
Go to Manage Jenkins > Manage Plugins.
Install Email Extension Plugin.

Configure SMTP Server:
Go to Manage Jenkins > Configure System.
Under  E-mail Notification:
SMTP server (e.g., smtp.gmail.com)
SMTP Port (e.g., 465 or 587)
Use authentication – yes, and enter your SMTP credentials.(here email and password)
Use SSL/TLS as required by your email provider.

Add Email Notification to Your Job:
Open the job > Configure.
Under Post-build Actions, choose:
Editable Email Notification
Define recipient list
$DEFAULT_RECIPIENTS
Advanced settings 
Add trigger
Trigger
Failure
Success
Unstable	
Fixed
Still Failing	
Aborted	
